version: '3.7'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.1
    ports:
      - 2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:5.4.1
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
  schema-registry:
    image: confluentinc/cp-schema-registry:5.4.1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zookeeper
      - kafka
  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.5
    ports:
      - 8000
    environment:
      SCHEMAREGISTRY_URL: http://schema-registry:8081/
      PROXY: "true"
    depends_on:
    - schema-registry
  connect:
    build: ../
    volumes:
      - ./secrets:/var/run/secrets/nais.io/vault
    ports:
      - "8083:8083"
      - "8084:8084"
      - "5555:5555"
    environment:
      CONNECT_REST_PORT: 8084
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: "/usr/share/java"
      KAFKA_JMX_PORT: 5555
      KAFKA_JMX_HOSTNAME: connect
      VAULT_TOKEN: "123456789"
      VAULT_ADDR: "http://vault:8200"
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
  postgres:
    image: postgres
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    ports:
      - "5432:5432"
  prometheus-jmx-exporter:
    image: solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143
    volumes:
      - ./jmx-kafka-connect-prometheus.yml:/etc/jmx-kafka-connect/jmx-kafka-connect-prometheus.yml
    entrypoint:
      - java
      - -XX:+UnlockExperimentalVMOptions
      - -XX:+UseCGroupMemoryLimitForHeap
      - -XX:MaxRAMFraction=1
      - -XshowSettings:vm
      - -jar
      - jmx_prometheus_httpserver.jar
      - "5556"
      - /etc/jmx-kafka-connect/jmx-kafka-connect-prometheus.yml
    ports:
      - "5556:5556"
  vault:
    image: vault:1.3.3
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "123456789"
      VAULT_ADDR: "http://localhost:8200"
      VAULT_TOKEN: "123456789"
      SKIP_SETCAP: "true"
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.7
    ports:
      - "8000:8000"
    environment:
      CONNECT_URL: "http://connect:8083"